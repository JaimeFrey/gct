#! /usr/bin/env perl

# 
# Copyright 1999-2006 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

@GLOBUS_PERL_INITIALIZER@

use strict;
use Test::Harness;
use Cwd;
use Getopt::Long;
require 5.005;
use vars qw(@tests);

#$Test::Harness::verbose = 1;

my $nogsi;
my $register_args = " -q ";
my $be_cmd;
my $gfork_pid;

if(defined($nogsi) or defined($ENV{FTP_TEST_NO_GSI}))
{
    $nogsi = 1;
    $ENV{FTP_TEST_NO_GSI} = 1;
    print "Not using GSI security.\n";
}


push(@INC, $ENV{GLOBUS_LOCATION} . "/lib/perl");

my $port = &setup_server();
if((0 != system("$Globus::Core::Paths::bindir/grid-proxy-info -exists -hours 2 >/dev/null 2>&1") / 256) && !defined($nogsi))
{
    print "Security proxy required to run the tests.\n";
    exit 1;
}

#$SIG{ALRM} = \&eatfd_db;
#alarm 20;

my $rc;
my $cmd = "$Globus::Core::Paths::bindir/globus-url-copy -v -len 315621376 -tcp-bs 16777216 -rst -rst-retries 0 -rst-interval 1 ftp://localhost:$port/dev/zero file:///dev/null";

my @a;
my $pid;
for(my $i = 0; $i <= 20; $i++) 
{
    unless ($pid = fork)
    {
            exec ($cmd)  or print STDERR "couldn't exec $cmd: $!"; 
            die "no exec";
            # ... or ...
            ## (some_perl_code_here)
            exit 0;
    }

    push(@a, $pid);
}

$|=1;
foreach(@a)
{
    $pid = $_;

    waitpid($pid, 0);
    $rc = $?;
    if($rc != 0)
    {
        print "processes $pid failed!\n";
    }
    else
    {
        print ".";
    }
}
print "\n";

&clean_up();

exit $rc;

#sub eatfd_db()
#{
#    my $junk = <SERVER>;
#    $SIG{ALRM} = \&eatfd_db;
#    alarm 20;
#}

sub clean_up()
{
    if($gfork_pid)
    {
        print "Killing gfork pid group: $gfork_pid\n";

        kill(15, $gfork_pid);
        kill(15, $gfork_pid+1); # this has to be naughty
        $gfork_pid=0;
    }
}

sub setup_server()
{
    my $gfork_prog = "$Globus::Core::Paths::sbindir/gfork";
    my $testdir = "$Globus::Core::Paths::exec_prefix/test";
    my $server_host = "localhost";
    my $server_port = 0;
    my $server_nosec = "";
    my $subject;
    my $use_gsi_opt;
    my $master_gmap;
    my $x;
    my $sec_envs;

    if(defined($nogsi))
    {
        $server_nosec = "-aa";
    }

    my $gfork_mem_conf = cwd() . "/gfork_mem_conf";
    $master_gmap = "$testdir/globus_gridftp_server_test/master_gridmap";
    
    $ENV{GRIDMAP} =  "$testdir/globus_ftp_client_test/gridmap";

    $sec_envs = "GRIDMAP=$ENV{GRIDMAP}";
    if(!defined($nogsi))
    {
        if(0 != system("$Globus::Core::Paths::bindir/grid-proxy-info -exists -hours 2 >/dev/null 2>&1") / 256)
        {
            $ENV{X509_CERT_DIR} = "$testdir/globus_ftp_client_test";
            $ENV{X509_USER_PROXY} = "$testdir/globus_ftp_client_test/testcred.pem";
            $sec_envs = "$sec_envs\n  env += X509_CERT_DIR=$ENV{X509_CERT_DIR}";
            $sec_envs = "$sec_envs\n  env += X509_USER_PROXY=$ENV{X509_USER_PROXY}";
            $sec_envs = "$sec_envs\n  env += X509_USER_CERT=$ENV{X509_USER_PROXY}";
        }
   
        my $cmd = "chmod go-rw $testdir/globus_ftp_client_test/testcred.pem" ;
        system($cmd);
         
        $subject = `$Globus::Core::Paths::bindir/grid-proxy-info -identity`;
        chomp($subject);
        
        if ( -f $ENV{GRIDMAP})
        {
            system('mv $GRIDMAP $GRIDMAP.old');    
        }   
        if( 0 != system("$Globus::Core::Paths::sbindir/grid-mapfile-add-entry -dn \"$subject\" -ln `whoami` -f $ENV{GRIDMAP} >/dev/null 2>&1") / 256)
        {
            print "Unable to create gridmap file\n";
            exit 1;
        }

        if( 0 != system("cp $ENV{GRIDMAP} $master_gmap") / 256)
        {
            print "Unable to create master gridmap file\n";
            exit 1;
        }

        $use_gsi_opt = "y";
        $register_args = "-q -G y";
    }
    else
    {
        $register_args = "-q -G n";
        $use_gsi_opt = "n";
    }


    open(IN, "<$gfork_mem_conf.in") || die "couldnt open $gfork_mem_conf.in";
    open(OUT, ">$gfork_mem_conf") || die "couldnt open $gfork_mem_conf";
    $x = join('', <IN>);
    $x =~ s/\@GLOBUS_LOCATION@/$Globus::Core::Paths::prefix/g;
    $x =~ s/\@GSI@/$use_gsi_opt/g;
    $x =~ s/\@SEC_ENVS@/$sec_envs/g;
    print OUT $x;
    close(IN);
    close(OUT);

    print "starting $gfork_prog -c $gfork_mem_conf\n";
    $gfork_pid = open(SERVER, "$gfork_prog -c $gfork_mem_conf |");
    if($gfork_pid == -1)
    {
        print "Unable to start server\n";
        exit 1;
    }
    select((select(SERVER), $| = 1)[0]);
    $server_port = <SERVER>;
    $server_port =~ s/Listening on: .*?:(\d+)/\1/;
    chomp($server_port);
    if($server_port !~ /\d+/)
    {
        print "Unable to start server\n";
        exit 1;
    }
    print "Started gfork on port $server_port\n";

    # sleep a second, some hosts are slow....
    $ENV{GLOBUS_FTP_CLIENT_TEST_SUBJECT} = $subject;
    $ENV{FTP_TEST_SOURCE_HOST} = "$server_host:$server_port";
    $ENV{FTP_TEST_DEST_HOST} = "$server_host:$server_port";   

    sleep 5;
    
    return $server_port;
}

